{"version":3,"sources":["webpack:///../ngx-json-schema-form/src/lib/json-schema-form.component.ts","webpack:///../ngx-json-schema-form/src/lib/json-schema-form.module.ts","webpack:///../ngx-json-schema-form/src/lib/json-schema-form.service.ts","webpack:///../ngx-json-schema-form/src/lib/layout.service.ts","webpack:///../ngx-json-schema-form/src/lib/schema.service.ts","webpack:///../ngx-json-schema-form/src/lib/widget-library/button/button.component.html","webpack:///../ngx-json-schema-form/src/lib/widget-library/button/button.component.scss","webpack:///../ngx-json-schema-form/src/lib/widget-library/button/button.component.ts","webpack:///../ngx-json-schema-form/src/lib/widget-library/index.ts","webpack:///../ngx-json-schema-form/src/lib/widget-library/widget-library.module.ts","webpack:///../ngx-json-schema-form/src/lib/widget-library/widget.ts","webpack:///../ngx-json-schema-form/src/public-api.ts","webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/json-loader.service.ts","webpack:///./src/app/root.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\n\r\nimport { cloneDeep, isPlainObject } from 'lodash';\r\n\r\nimport { JSONSchema7 } from 'json-schema';\r\n\r\nimport { JsonSchemaFormService } from './json-schema-form.service';\r\nimport { LayoutItem } from './layout-item.data';\r\nimport { LayoutService } from './layout.service';\r\nimport { SchemaService } from './schema.service';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        JsonSchemaFormService,\r\n        LayoutService,\r\n        SchemaService\r\n    ],\r\n    selector: 'jsf-json-schema-form',\r\n    styles: [],\r\n    template: `\r\n        <form></form>\r\n    `\r\n})\r\nexport class JsonSchemaFormComponent implements OnChanges, OnInit {\r\n    @Input() schema: JSONSchema7;\r\n    @Input() layout: Array<LayoutItem>;\r\n\r\n    private formInitialized = false;\r\n\r\n    constructor(\r\n        // private readonly jsf: JsonSchemaFormService,\r\n        private readonly schemaService: SchemaService,\r\n        private readonly layoutService: LayoutService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.updateForm();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.hasOwnProperty('schema')) {\r\n            this.formInitialized = false;\r\n        }\r\n        this.updateForm();\r\n    }\r\n\r\n    private updateForm(): void {\r\n        if (!this.formInitialized) {\r\n            this.initializeForm();\r\n        }\r\n    }\r\n\r\n    private initializeForm(): void {\r\n        this.initializeSchema();\r\n        this.initializeLayout();\r\n        this.formInitialized = true;\r\n    }\r\n\r\n    private initializeLayout(): void {\r\n        this.layoutService.layout = cloneDeep(this.layout || []);\r\n    }\r\n\r\n    private initializeSchema(): void {\r\n        if (isPlainObject(this.schema)) {\r\n            this.schemaService.schema = cloneDeep(this.schema);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { WidgetLibraryModule } from './widget-library/widget-library.module';\r\n\r\nimport { JsonSchemaFormComponent } from './json-schema-form.component';\r\n\r\n@NgModule({\r\n    declarations: [ JsonSchemaFormComponent ],\r\n    exports: [ JsonSchemaFormComponent, WidgetLibraryModule ],\r\n    imports: [ WidgetLibraryModule ]\r\n})\r\nexport class JsonSchemaFormModule { }\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class JsonSchemaFormService {\n    private x = false;\n\n    initializeControl(ctx: any, bind = true): boolean {\n        // TODO\n\n        return this.x;\n    }\n\n    updateValue(ctx: any, value: any): void {\n        // TODO\n        this.x = value;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { clone, pick, uniqueId } from 'lodash';\n\nimport { LayoutItem } from './layout-item.data';\n\n@Injectable()\nexport class LayoutService {\n    private _layout: Array<any> = [];\n    set layout(value: Array<any>) {\n        this._layout = LayoutService.buildLayout(value);\n    }\n    get layout(): Array<any> {\n        return this._layout;\n    }\n\n    private static buildLayout(layout: Array<LayoutItem>): Array<LayoutItem> {\n        // let hasSubmitButton = !JsonPointer.get(jsf, '/formOptions/addSubmit');\n        const formLayout: Array<LayoutItem> = LayoutService.mapLayout(layout, (layoutItem, index, layoutPointer) => {\n            const newNode: LayoutItem = {\n                id: uniqueId(),\n                options: {},\n                ...pick(layoutItem, ['key', 'type'])\n            };\n            // Dropped code to push invalid props into options\n            // Dropped code to convert widget to type\n            // Dropped code to convert options.legend to options.title\n\n            return newNode;\n    // if (isObject(layoutItem)) {\n\n    //   if (!hasOwn(newNode.options, 'validationMessages')) {\n    //     if (hasOwn(newNode.options, 'errorMessages')) {\n    //       newNode.options.validationMessages = newNode.options.errorMessages;\n    //       delete newNode.options.errorMessages;\n\n    //     // Convert Angular Schema Form (AngularJS) 'validationMessage' to\n    //     // Angular JSON Schema Form 'validationMessages'\n    //     // TV4 codes from https://github.com/geraintluff/tv4/blob/master/source/api.js\n    //     } else if (hasOwn(newNode.options, 'validationMessage')) {\n    //       if (typeof newNode.options.validationMessage === 'string') {\n    //         newNode.options.validationMessages = newNode.options.validationMessage;\n    //       } else {\n    //         newNode.options.validationMessages = {};\n    //         Object.keys(newNode.options.validationMessage).forEach(key => {\n    //           const code = key + '';\n    //           const newKey =\n    //             code ===  '0'  ? 'type' :\n    //             code ===  '1'  ? 'enum' :\n    //             code === '100' ? 'multipleOf' :\n    //             code === '101' ? 'minimum' :\n    //             code === '102' ? 'exclusiveMinimum' :\n    //             code === '103' ? 'maximum' :\n    //             code === '104' ? 'exclusiveMaximum' :\n    //             code === '200' ? 'minLength' :\n    //             code === '201' ? 'maxLength' :\n    //             code === '202' ? 'pattern' :\n    //             code === '300' ? 'minProperties' :\n    //             code === '301' ? 'maxProperties' :\n    //             code === '302' ? 'required' :\n    //             code === '304' ? 'dependencies' :\n    //             code === '400' ? 'minItems' :\n    //             code === '401' ? 'maxItems' :\n    //             code === '402' ? 'uniqueItems' :\n    //             code === '500' ? 'format' : code + '';\n    //           newNode.options.validationMessages[newKey] = newNode.options.validationMessage[key];\n    //         });\n    //       }\n    //       delete newNode.options.validationMessage;\n    //     }\n    //   }\n    // } else if (JsonPointer.isJsonPointer(layoutItem)) {\n    //   newNode.dataPointer = layoutItem;\n    // } else if (isString(layoutItem)) {\n    //   newNode.key = layoutItem;\n    // } else {\n    //   console.error('buildLayout error: Form layout element not recognized:');\n    //   console.error(layoutItem);\n    //   return null;\n    // }\n        });\n\n        return formLayout;\n    }\n\n    /**\n     * 'mapLayout' function\n     *\n     * Creates a new layout by running each element in an existing layout through\n     * an iteratee. Recursively maps within array elements 'items' and 'tabs'.\n     * The iteratee is invoked with four arguments: (value, index, layout, path)\n     *\n     * The returned layout may be longer (or shorter) then the source layout.\n     *\n     * If an item from the source layout returns multiple items (as '*' usually will),\n     * this function will keep all returned items in-line with the surrounding items.\n     *\n     * If an item from the source layout causes an error and returns null, it is\n     * skipped without error, and the function will still return all non-null items.\n     *\n     * @param  layout - the layout to map\n     * @param  function - the funciton to invoke on each element\n     * @param  layoutPointer - the layoutPointer to layout, inside rootLayout\n     * @param  rootLayout - the root layout, which conatins layout\n     * @return the mapped layout\n     */\n    private static mapLayout(layout: Array<LayoutItem>, fn: (v: any, i?: number, l?: any, p?: any) => LayoutItem,\n        layoutPointer: string|Array<string> = '', rootLayout: Array<LayoutItem> = layout): Array<LayoutItem> {\n        const indexPad = 0;\n\n        return layout.reduce((mappedLayout: Array<LayoutItem>, item: LayoutItem, index: number) => {\n            const realIndex: number = +index + indexPad;\n            const newLayoutPointer = `${layoutPointer}/${realIndex}`;\n            let newNode: LayoutItem = clone(item);\n            let newLayout: Array<LayoutItem> = mappedLayout;\n            // Note: removed logic to convert tabs to items and items to [items]\n            // if (item.items) {\n            //     newNode.items = LayoutService.mapLayout(item.items, fn, `${newLayoutPointer}/items`, rootLayout);\n            // }\n            newNode = fn(newNode, realIndex, newLayoutPointer, rootLayout);\n            // if (isNil(newNode)) {\n            //     indexPad -= 1;\n            // } else {\n            //     if (Array.isArray(newNode)) { indexPad += newNode.length - 1; }\n                newLayout = mappedLayout.concat(newNode);\n            // }\n\n            return newLayout;\n        }, []);\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport Ajv from 'ajv';\n\nimport { JSONSchema7 } from 'json-schema';\n\n\n@Injectable()\nexport class SchemaService {\n    // TODO: Setter function to automatically upgrade schema version?\n    private _schema: JSONSchema7 = {};\n    set schema(value: JSONSchema7) {\n        this._schema = value;\n        this.compileSchema();\n    }\n    get schema(): JSONSchema7 {\n        return this._schema;\n    }\n\n    private readonly ajv: Ajv.Ajv = new Ajv({ allErrors: true, jsonPointers: true, unknownFormats: 'ignore' });\n    private validator: Ajv.ValidateFunction;\n\n    validate(data: any): boolean {\n        return <boolean>this.validator(data);\n    }\n\n    private compileSchema() {\n        this.ajv.removeSchema(this.schema);\n        this.validator = this.ajv.compile(this.schema);\n    }\n}\n","module.exports = \"<button\\n    [attr.readonly]=\\\"options?.readonly ? 'readonly' : null\\\"\\n    [attr.aria-describedby]=\\\"'control' + layoutNode?._id + 'Status'\\\"\\n    [class]=\\\"options?.htmlClass || ''\\\"\\n    [disabled]=\\\"controlDisabled\\\"\\n    [name]=\\\"controlName\\\"\\n    [type]=\\\"layoutNode?.type\\\"\\n    [value]=\\\"controlValue\\\"\\n    (click)=\\\"updateValue($event)\\\">\\n    <span *ngIf=\\\"options?.icon || options?.title\\\"\\n        [class]=\\\"options?.icon\\\">{{ options?.title }}</span>\\n</button>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9uZ3gtanNvbi1zY2hlbWEtZm9ybS9zcmMvbGliL3dpZGdldC1saWJyYXJ5L2J1dHRvbi9idXR0b24uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component } from '@angular/core';\r\n\r\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\r\n\r\nimport { Widget } from '../widget';\r\n\r\n@Component({\r\n    selector: 'jsf-button',\r\n    styleUrls: ['./button.component.scss'],\r\n    templateUrl: './button.component.html'\r\n})\r\nexport class ButtonComponent extends Widget {\r\n\r\n    constructor(jsf: JsonSchemaFormService) {\r\n        super(jsf);\r\n    }\r\n\r\n    updateValue(event: MouseEvent) {\r\n        if (typeof this.options.onClick === 'function') {\r\n            this.options.onClick(event);\r\n        } else {\r\n            super.updateValue(event);\r\n        }\r\n    }\r\n\r\n}\r\n","import { ButtonComponent } from './button/button.component';\r\n\r\nexport const BASIC_WIDGETS = [\r\n    ButtonComponent\r\n];\r\n\r\nexport { Widget } from './widget';\r\n\r\nexport { ButtonComponent } from './button/button.component';\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { BASIC_WIDGETS } from '.';\n\n@NgModule({\n    declarations: [ ...BASIC_WIDGETS ],\n    entryComponents: [ ...BASIC_WIDGETS ],\n    exports: [ ...BASIC_WIDGETS ],\n    imports: [ CommonModule ]\n})\nexport class WidgetLibraryModule { }\n","import { Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\nexport abstract class Widget implements OnInit {\n    boundControl = false;\n    controlDisabled = false;\n    controlName: string;\n    controlValue: any;\n    formControl: AbstractControl;\n    options: any;\n\n    @Input() layoutNode: any;\n    @Input() layoutIndex: Array<number>;\n    @Input() dataIndex: Array<number>;\n\n    constructor(protected jsf: JsonSchemaFormService) {}\n\n    ngOnInit() {\n        this.jsf.initializeControl(this);\n        this.options = this.layoutNode.options || {};\n    }\n\n    updateValue(event: Event) {\n        this.jsf.updateValue(this, (<HTMLInputElement>event.target).value);\n    }\n}\n","/*\n * Public API Surface of json-schema-form\n */\n\nexport * from './lib/json-schema-form.service';\nexport * from './lib/json-schema-form.component';\nexport * from './lib/json-schema-form.module';\nexport * from './lib/widget-library';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"demo-page-header\\\">\\n    <mat-toolbar class=\\\"mat-elevation-z4 mat-medium\\\" color=\\\"primary\\\">\\n        NGX Angular JSON Schema Form — Demonstration Playground\\n    </mat-toolbar>\\n    <div class=\\\"header-content\\\">\\n        An Angular <a href=\\\"http://json-schema.org/\\\">JSON Schema</a> Form builder\\n        <!-- for Angular 7, similar to, and mostly API compatible with,\\n        <span class=\\\"avoidwrap\\\">\\n            <!- JSON Schema Form's Angular Schema Form ->\\n            <!- https://github.com/json-schema-form ->\\n            <!- http://schemaform.io ->\\n            <a href=\\\"http://schemaform.io/examples/bootstrap-example.html\\\">Angular Schema Form</a>,\\n            <!- Mozilla's React JSON Schema Form ->\\n            <!- https://github.com/mozilla-services/react-jsonschema-form ->\\n            <a href=\\\"https://mozilla-services.github.io/react-jsonschema-form/\\\">React JSON Schema Form</a>,\\n            and\\n            <!- Joshfire's JSON Form ->\\n            <!- http://factory.joshfire.com/ ->\\n            <!- http://github.com/joshfire/jsonform/wiki ->\\n            <a href=\\\"http://ulion.github.io/jsonform/playground/\\\">JSON Form</a>.\\n        </span><br> -->\\n        Choose an example, or create your own, and check out the generated form.<br><br>\\n        <span class=\\\"menu-label\\\">Current example:</span>\\n        <button mat-raised-button color=\\\"primary\\\" [matMenuTriggerFor]=\\\"exampleMenu\\\">\\n            <mat-icon>menu</mat-icon> {{ selectedSetName }} {{ selectedExampleName }}\\n        </button>\\n        <mat-menu #exampleMenu=\\\"matMenu\\\" class=\\\"example-menu\\\">\\n            <ng-container *ngFor=\\\"let group of examplesObservable | async; trackBy: trackByFn\\\">\\n                <ng-container *ngIf=\\\"group.set === 'ngx'; then flat; else nested\\\"></ng-container>\\n                <ng-template #flat>\\n                    <button mat-menu-item class=\\\"mat-medium\\\"\\n                        *ngFor=\\\"let example of group.examples; trackBy: trackByFn\\\"\\n                        (click)=\\\"loadSelectedExample(group.set, '', example.file, example.name)\\\">\\n                        {{ example.name }}\\n                    </button>\\n                </ng-template>\\n                <ng-template #nested>\\n                    <button mat-menu-item class=\\\"mat-medium\\\" [matMenuTriggerFor]=\\\"sub_menu\\\">\\n                        <span>{{ group.name }}</span>\\n                    </button>\\n                    <mat-menu #sub_menu=\\\"matMenu\\\" class=\\\"example-menu\\\">\\n                        <button mat-menu-item class=\\\"mat-medium\\\"\\n                            *ngFor=\\\"let example of group.examples; trackBy: trackByFn\\\"\\n                            (click)=\\\"loadSelectedExample(group.set, group.label, example.file, example.name)\\\">\\n                            {{ example.name }}\\n                        </button>\\n                    </mat-menu>\\n                </ng-template>\\n            </ng-container>\\n            <!-- <button mat-menu-item class=\\\"mat-medium\\\" [matMenuTriggerFor]=\\\"asfMenu\\\">\\n                <span>Angular Schema Form (AngularJS) examples</span>\\n            </button>\\n            <mat-menu #asfMenu=\\\"matMenu\\\" class=\\\"example-menu\\\">\\n                <button mat-menu-item class=\\\"mat-medium\\\"\\n                    *ngFor=\\\"let example of examples.asf.schemas\\\"\\n                    (click)=\\\"loadSelectedExample('asf', 'Angular Schema Form:', example.file, example.name)\\\">\\n                    {{example.name}}\\n                </button>\\n            </mat-menu>\\n            <button mat-menu-item class=\\\"mat-medium\\\" [matMenuTriggerFor]=\\\"rjsfMenu\\\">\\n                <span>React JSON Schema Form examples</span>\\n            </button>\\n            <mat-menu #rjsfMenu=\\\"matMenu\\\" class=\\\"example-menu\\\">\\n                <button mat-menu-item class=\\\"mat-medium\\\"\\n                    *ngFor=\\\"let example of examples.rjsf.schemas\\\"\\n                    (click)=\\\"loadSelectedExample('rjsf', 'React JSON Schema Form:', example.file, example.name)\\\">\\n                    {{example.name}}\\n                </button>\\n            </mat-menu>\\n            <button mat-menu-item class=\\\"mat-medium\\\" [matMenuTriggerFor]=\\\"jsfMenu\\\">\\n                <span>JSONForm (jQuery) examples</span>\\n            </button>\\n            <mat-menu #jsfMenu=\\\"matMenu\\\" class=\\\"example-menu\\\">\\n                <button mat-menu-item class=\\\"mat-medium\\\"\\n                    *ngFor=\\\"let example of examples.jsf.schemas\\\"\\n                    (click)=\\\"loadSelectedExample('jsf', 'JSONForm:', example.file, example.name)\\\">\\n                    {{example.name}}\\n                </button>\\n            </mat-menu> -->\\n        </mat-menu>\\n    </div>\\n</div>\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-around start\\\"\\n    fxLayout.lt-sm=\\\"column\\\" fxLayoutAlign.lt-sm=\\\"flex-start center\\\">\\n    <mat-card fxFlex=\\\"0 0 calc(50% - 12px)\\\">\\n        <!-- <h4 class=\\\"default-cursor\\\" (click)=\\\"toggleVisible('options')\\\">\\n            {{visible.options ? '▼' : '▶'}} Selected Framework and Options\\n        </h4>\\n        <div *ngIf=\\\"visible.options\\\" fxLayout=\\\"column\\\" [@expandSection]=\\\"true\\\">\\n            <mat-form-field>\\n                <mat-select\\n                    [(ngModel)]=\\\"selectedFramework\\\"\\n                    name=\\\"framework\\\"\\n                    placeholder=\\\"Framework\\\">\\n                    <mat-option\\n                        *ngFor=\\\"let framework of frameworkList\\\"\\n                        [value]=\\\"framework\\\">\\n                        {{frameworks[framework]}}\\n                    </mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <mat-form-field>\\n                <mat-select\\n                    [(ngModel)]=\\\"selectedLanguage\\\"\\n                    (change)=\\\"loadSelectedLanguage()\\\"\\n                    name=\\\"language\\\"\\n                    placeholder=\\\"Language\\\">\\n                    <mat-option\\n                        *ngFor=\\\"let language of languageList\\\"\\n                        [value]=\\\"language\\\">\\n                        {{languages[language]}}\\n                    </mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <div class=\\\"check-row\\\">\\n                <mat-checkbox color=\\\"primary\\\" [(ngModel)]=\\\"jsonFormOptions.returnEmptyFields\\\">\\n                    Return empty fields?\\n                </mat-checkbox>\\n                (default = true)\\n            </div>\\n            <div class=\\\"check-row\\\">\\n                <mat-checkbox color=\\\"primary\\\" [(ngModel)]=\\\"jsonFormOptions.addSubmit\\\">\\n                    Add submit button?\\n                </mat-checkbox>\\n                (default = only add if no layout is defined)\\n            </div>\\n            <div class=\\\"check-row\\\">\\n                <mat-checkbox color=\\\"primary\\\" [(ngModel)]=\\\"jsonFormOptions.defaultWidgetOptions.feedback\\\">\\n                    Show inline fedback?\\n                </mat-checkbox>\\n                (default = false)\\n            </div>\\n            <div class=\\\"check-row\\\">\\n                <mat-checkbox color=\\\"primary\\\" [(ngModel)]=\\\"jsonFormOptions.debug\\\">\\n                    Show debuging information?\\n                </mat-checkbox>\\n                (default = false)\\n            </div>\\n        </div> -->\\n        <hr>\\n        <details open>\\n            <summary>Input JSON Schema and Form Layout</summary>\\n            <ace-editor\\n                [mode]=\\\"'json'\\\"\\n                [autoUpdateContent]=\\\"true\\\"\\n                [options]=\\\"aceEditorOptions\\\"\\n                [readOnly]=\\\"false\\\"\\n                [text]=\\\"jsonFormSchema\\\"\\n                (textChanged)=\\\"generateForm($event)\\\">\\n                (loading form specification...)\\n            </ace-editor>\\n        </details>\\n    </mat-card>\\n    <mat-card fxFlex=\\\"0 0 calc(50% - 12px)\\\">\\n        <details open>\\n            <summary>Generated Form</summary>\\n            <div class=\\\"json-schema-form\\\">\\n                <ng-container *ngIf=\\\"formActive; then showForm; else showMessage\\\"></ng-container>\\n                <ng-template #showForm>\\n                    <jsf-json-schema-form></jsf-json-schema-form>\\n                        <!-- loadExternalAssets=\\\"true\\\"\\n                        [form]=\\\"jsonFormObject\\\"\\n                        [options]=\\\"jsonFormOptions\\\"\\n                        [framework]=\\\"selectedFramework\\\"\\n                        [language]=\\\"selectedLanguage\\\"\\n                        (onChanges)=\\\"onChanges($event)\\\"\\n                        (onSubmit)=\\\"onSubmit($event)\\\"\\n                        (isValid)=\\\"isValid($event)\\\"\\n                        (validationErrors)=\\\"validationErrors($event)\\\" -->\\n                </ng-template>\\n                <ng-template #showMessage>\\n                    <div>{{ jsonFormStatusMessage }}</div>\\n                </ng-template>\\n            </div>\\n        </details>\\n        <!-- <hr>\\n        <h4 class=\\\"default-cursor\\\" (click)=\\\"toggleVisible('output')\\\">\\n            {{visible.output ? '▼' : '▶'}} Form Output\\n        </h4>\\n        <div *ngIf=\\\"visible.output\\\" fxLayout=\\\"column\\\" [@expandSection]=\\\"true\\\">\\n            <div>\\n                Valid?:\\n                <strong *ngIf=\\\"formIsValid || prettyValidationErrors\\\"\\n                    [class.text-success]=\\\"formIsValid\\\"\\n                    [class.text-danger]=\\\"!formIsValid\\\">\\n                    {{formIsValid ? 'Yes' : 'No'}}\\n                </strong>\\n                <span *ngIf=\\\"!formIsValid && !prettyValidationErrors\\\">n/a</span>\\n                <span *ngIf=\\\"prettyValidationErrors\\\">— errors from validationErrors():</span>\\n                <div *ngIf=\\\"prettyValidationErrors\\\"\\n                class=\\\"data-bad\\\"\\n                [innerHTML]=\\\"prettyValidationErrors\\\"></div>\\n            </div><br>\\n            <div>\\n                Live data — from onChanges():\\n                <pre\\n                [class.data-good]=\\\"!prettyValidationErrors && prettyLiveFormData !== '{}'\\\"\\n                [class.data-bad]=\\\"prettyValidationErrors\\\">{{prettyLiveFormData}}</pre>\\n            </div><br>\\n            <div>\\n                Submitted data — from onSubmit():\\n                <pre [class.data-good]=\\\"prettySubmittedFormData !== 'null'\\\">{{prettySubmittedFormData}}</pre>\\n            </div>\\n        </div> -->\\n    </mat-card>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9kZW1vL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIn0= */\"","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { JsonLoaderService } from './json-loader.service';\n\nconst sets = {\n    // asf: 'Angular Schema Form:',\n    // jsf: 'JSONForm:',\n    ngx: ''\n    // rsf: 'React Schema Form:'\n};\n\n@Component({\n    animations: [\n        trigger('expandSection', [\n            state('in', style({ height: '*' })),\n            transition(':enter', [\n                style({ height: 0 }), animate('100ms')\n            ]),\n            transition(':leave', [\n                style({ height: '*' }),\n                animate('100ms', style({ height: 0 }))\n            ])\n        ])\n    ],\n    selector: 'app-demo',\n    styleUrls: ['./app.component.scss'],\n    templateUrl: './app.component.html'\n})\nexport class AppComponent implements OnInit {\n    // examples: any = {ngx: {}};\n    // languageList: any = ['en', 'fr'];\n    // languages: any = {\n    //     'en': 'English',\n    //     'fr': 'French',\n    // };\n    // frameworkList: any = ['material-design', 'bootstrap-3', 'bootstrap-4', 'no-framework'];\n    // frameworks: any = {\n    //     'material-design': 'Material Design',\n    //     'bootstrap-3': 'Bootstrap 3',\n    //     'bootstrap-4': 'Bootstrap 4',\n    //     'no-framework': 'None (plain HTML)',\n    // };\n    selectedSet = '';\n    selectedSetName = '';\n    selectedExample = '';\n    selectedExampleName = '';\n    // selectedFramework = 'material-design';\n    // selectedLanguage = 'en';\n\n    formActive = false;\n    jsonFormSchema: string;\n    jsonFormValid = false;\n    jsonFormStatusMessage = 'Loading form...';\n    jsonFormObject: any;\n    // jsonFormOptions: any = {\n    //     addSubmit: true, // Add a submit button if layout does not have one\n    //     debug: false, // Don't show inline debugging information\n    //     loadExternalAssets: true, // Load external css and JavaScript for frameworks\n    //     returnEmptyFields: false, // Don't return values for empty input fields\n    //     setSchemaDefaults: true, // Always use schema defaults for empty fields\n    //     defaultWidgetOptions: { feedback: true }, // Show inline feedback icons\n    // };\n    // liveFormData: any = {};\n    // formValidationErrors: any;\n    // formIsValid = null;\n    // submittedFormData: any = null;\n    aceEditorOptions: any = {\n        autoScrollEditorIntoView: true,\n        highlightActiveLine: true,\n        maxLines: 1000,\n        printMargin: false\n    };\n    @ViewChild(MatMenuTrigger) menuTrigger: MatMenuTrigger;\n\n    public examplesObservable: Observable<Array<any>>;\n\n    constructor(\n        private readonly route: ActivatedRoute,\n        private readonly router: Router,\n        private readonly jsonLoader: JsonLoaderService\n    ) { }\n\n    ngOnInit() {\n        this.examplesObservable = this.jsonLoader.examples;\n        this.selectedSet = 'ngx';\n        this.selectedExample = 'simple-array';\n        this.selectedExampleName = 'Simple Array';\n        this.route.queryParams.subscribe((params: Params) => {\n            if (params.set) {\n                this.selectedSet = params.set;\n                this.selectedSetName = sets[this.selectedSet];\n            }\n            if (params.example) {\n                this.selectedExample = params.example;\n                this.jsonLoader.examples.subscribe((examples: Array<any>) => {\n                    this.selectedExampleName = examples\n                        .find((data: any) => data.set === [this.selectedSet])\n                        .find((data: any) => data.file === this.selectedExample).name;\n                });\n            }\n            // if (params['framework']) {\n            //     this.selectedFramework = params['framework'];\n            // }\n            // if (params['language']) {\n            //     this.selectedLanguage = params['language'];\n            // }\n            this.loadSelectedExample();\n        });\n    }\n\n    trackByFn(index) {\n        return index;\n    }\n\n    // onSubmit(data: any) {\n    //     this.submittedFormData = data;\n    // }\n\n    // get prettySubmittedFormData() {\n    //     return JSON.stringify(this.submittedFormData, null, 2);\n    // }\n\n    // onChanges(data: any) {\n    //     this.liveFormData = data;\n    // }\n\n    // get prettyLiveFormData() {\n    //     return JSON.stringify(this.liveFormData, null, 2);\n    // }\n\n    // isValid(isValid: boolean): void {\n    //     this.formIsValid = isValid;\n    // }\n\n    // validationErrors(data: any): void {\n    //     this.formValidationErrors = data;\n    // }\n\n    // get prettyValidationErrors() {\n    //     if (!this.formValidationErrors) { return null; }\n    //     let errorArray = [];\n    //     for (let error of this.formValidationErrors) {\n    //     let message = error.message;\n    //     let dataPathArray = JsonPointer.parse(error.dataPath);\n    //     if (dataPathArray.length) {\n    //         let field = dataPathArray[0];\n    //         for (let i = 1; i < dataPathArray.length; i++) {\n    //         const key = dataPathArray[i];\n    //         field += /^\\d+$/.test(key) ? `[${key}]` : `.${key}`;\n    //         }\n    //         errorArray.push(`${field}: ${message}`);\n    //     } else {\n    //         errorArray.push(message);\n    //     }\n    //     }\n    //     return errorArray.join('<br>');\n    // }\n\n  loadSelectedExample(\n        selectedSet: string = this.selectedSet,\n        selectedSetName: string = this.selectedSetName,\n        selectedExample: string = this.selectedExample,\n        selectedExampleName: string = this.selectedExampleName\n    ) {\n        if (this.menuTrigger && this.menuTrigger.menuOpen) { this.menuTrigger.closeMenu(); }\n        if (selectedExample !== this.selectedExample) {\n            this.formActive = false;\n            this.selectedSet = selectedSet;\n            this.selectedSetName = selectedSetName;\n            this.selectedExample = selectedExample;\n            this.selectedExampleName = selectedExampleName;\n            this.router.navigateByUrl(`/\\\n                ?set=${selectedSet}\\\n                &example=${selectedExample}\\\n            `).catch((reason) => {\n                console.warn(reason);\n            });\n                // &framework=${this.selectedFramework}\\\n                // &language=${this.selectedLanguage}\\\n            // this.liveFormData = {};\n            // this.submittedFormData = null;\n            // this.formIsValid = null;\n            // this.formValidationErrors = null;\n        } else {\n            this.jsonLoader.getExample(this.selectedSet, this.selectedExample)\n                .subscribe((schema: string) => {\n                    this.jsonFormSchema = schema;\n                    this.generateForm(this.jsonFormSchema);\n                });\n        }\n    }\n\n    // loadSelectedLanguage() {\n    //     window.location.href =\n    //     '/?set=' + this.selectedSet +\n    //     '&example=' + this.selectedExample +\n    //     '&framework=' + this.selectedFramework +\n    //     '&language=' + this.selectedLanguage;\n    // }\n\n    // Display the form entered by the user\n    // (runs whenever the user changes the jsonform object in the ACE input field)\n    generateForm(newFormString: string) {\n        if (!newFormString) { return; }\n        this.jsonFormStatusMessage = 'Loading form...';\n        this.formActive = false;\n        // this.liveFormData = {};\n        // this.submittedFormData = null;\n\n        // Most examples should be written in pure JSON,\n        // but if an example schema includes a function,\n        // it will be compiled it as Javascript instead\n        // try {\n        // // Parse entered content as JSON\n        // this.jsonFormObject = JSON.parse(newFormString);\n        // this.jsonFormValid = true;\n        // } catch (jsonError) {\n        //     try {\n\n        //         // If entered content is not valid JSON,\n        //         // parse as JavaScript instead to include functions\n        //         let newFormObject: any = null;\n        //         /* tslint:disable */\n        //         eval('newFormObject = ' + newFormString);\n        //         /* tslint:enable */\n        //         this.jsonFormObject = newFormObject;\n        //         this.jsonFormValid = true;\n        //     } catch (javascriptError) {\n\n        //         // If entered content is not valid JSON or JavaScript, show error\n        //         this.jsonFormValid = false;\n        //         this.jsonFormStatusMessage =\n        //         'Entered content is not currently a valid JSON Form object.\\n' +\n        //         'As soon as it is, you will see your form here. So keep typing. :-)\\n\\n' +\n        //         'JavaScript parser returned:\\n\\n' + jsonError;\n        //         return;\n        //     }\n        // }\n        this.formActive = true;\n    }\n\n    // toggleFormOption(option: string) {\n    //     if (option === 'feedback') {\n    //     this.jsonFormOptions.defaultWidgetOptions.feedback =\n    //         !this.jsonFormOptions.defaultWidgetOptions.feedback;\n    //     } else {\n    //     this.jsonFormOptions[option] = !this.jsonFormOptions[option];\n    //     }\n    //     this.generateForm(this.jsonFormSchema);\n    // }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule } from '@angular/forms';\nimport {\n    MatButtonModule, MatCardModule, MatCheckboxModule, MatIconModule,\n    MatMenuModule, MatSelectModule, MatToolbarModule\n} from '@angular/material';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterModule } from '@angular/router';\n\nimport { AceEditorModule } from 'ng2-ace-editor';\n\nimport { JsonSchemaFormModule } from '../../../ngx-json-schema-form/src/public-api';\n\nimport { AppComponent } from './app.component';\nimport { routes } from './app.routes';\nimport { RootComponent } from './root.component';\n\n@NgModule({\n    bootstrap: [ RootComponent ],\n    declarations: [\n        AppComponent,\n        RootComponent\n    ],\n    imports: [\n        BrowserModule, BrowserAnimationsModule, FormsModule, HttpClientModule, FlexLayoutModule,\n        MatButtonModule, MatCardModule, MatCheckboxModule,\n        MatIconModule, MatMenuModule, MatSelectModule, MatToolbarModule,\n        RouterModule.forRoot(routes),\n\n        AceEditorModule,\n\n        JsonSchemaFormModule\n    ]\n})\nexport class AppModule { }\n","import { Route } from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\nexport const routes: Array<Route> = [\r\n    { path: '', component: AppComponent },\r\n    { path: '**', component: AppComponent }\r\n];\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class JsonLoaderService {\r\n    private readonly examplesURL = 'assets/examples/examples.json';\r\n\r\n    constructor(private readonly httpClient: HttpClient) {}\r\n\r\n    get examples(): Observable<any> {\r\n        return this.httpClient.get(this.examplesURL);\r\n    }\r\n\r\n    getExample(set: string, example: string): Observable<any> {\r\n        const exampleURL = `assets/examples/${set}/${example}.json`;\r\n\r\n        return this.httpClient.get(exampleURL, { responseType: 'text' });\r\n    }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `<router-outlet></router-outlet>`\r\n})\r\nexport class RootComponent { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'brace/mode/json';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch((err) => {\n    console.error(err);\n  });\n"],"sourceRoot":""}